var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
export var Spacer = function (_a) {
    var 
    /**
     * Which html tag to render as
     *
     * @default div
     */
    _b = _a.tag, 
    /**
     * Which html tag to render as
     *
     * @default div
     */
    tag = _b === void 0 ? 'div' : _b, children = _a.children, 
    /**
     * Props for margin values, including explicit and shorthand options
     */
    margin = _a.margin, marginX = _a.marginX, mx = _a.mx, marginY = _a.marginY, my = _a.my, marginTop = _a.marginTop, mt = _a.mt, marginBottom = _a.marginBottom, mb = _a.mb, marginLeft = _a.marginLeft, ml = _a.ml, marginRight = _a.marginRight, mr = _a.mr, 
    /**
     * Props for padding values, including explicit and shorthand options
     */
    padding = _a.padding, paddingX = _a.paddingX, px = _a.px, paddingY = _a.paddingY, py = _a.py, paddingTop = _a.paddingTop, pt = _a.pt, paddingBottom = _a.paddingBottom, pb = _a.pb, paddingLeft = _a.paddingLeft, pl = _a.pl, paddingRight = _a.paddingRight, pr = _a.pr, 
    /**
     * Optional data-testid value
     */
    testid = _a.testid;
    var Component = tag;
    var convertToRem = function (px) {
        if (!px) {
            return undefined;
        }
        return px / 16 + "rem";
    };
    var paddingStyles = {
        paddingRight: convertToRem(padding || paddingX || px || paddingRight || pr || undefined),
        paddingLeft: convertToRem(padding || paddingX || px || paddingLeft || pl || undefined),
        paddingTop: convertToRem(padding || paddingY || py || paddingTop || pt || undefined),
        paddingBottom: convertToRem(padding || paddingY || py || paddingBottom || pb || undefined),
    };
    var marginStyles = {
        marginRight: convertToRem(margin || marginX || mx || marginRight || mr || undefined),
        marginLeft: convertToRem(margin || marginX || mx || marginLeft || ml || undefined),
        marginTop: convertToRem(margin || marginY || my || marginTop || mt || undefined),
        marginBottom: convertToRem(margin || marginY || my || marginBottom || mb || undefined),
    };
    var styles = __assign(__assign({}, paddingStyles), marginStyles);
    return (React.createElement(Component, { style: styles, "data-testid": testid }, children));
};
